exports[`(.not).toHaveBodyMatchObject > using axios > .toHaveBodyMatchObject > should fail when the received response body have content type plain/text even though the data itself is JSON string  1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected response to have json body

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "plain/text",
    "content-length": "2",
    "connection": "keep-alive"
  },
  "body": {}
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > .toHaveBodyMatchObject > should fail when the received response body is plain/text data 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected response to have json body

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "plain/text",
    "content-length": "11",
    "connection": "keep-alive"
  },
  "body": "hello world"
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > response object does not have property and expected body has property undefined should match 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": undefined}</color>

Received: <red>{}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "2",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is [0] and expected value is [-0] as -0 and 0 are the same value in JSON 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>[-0]</color>

Received: <red>[0]</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "3",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is [1, 2] and expected value is [1, 2] 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>[1, 2]</color>

Received: <red>[1, 2]</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "5",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is [] and expected value is [] 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>[]</color>

Received: <red>[]</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "2",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: 'b', c: 'd'} and expected value is {a: 'b', c: 'd'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": "b", "c": "d"}</color>

Received: <red>{"a": "b", "c": "d"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "17",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: 'b', c: 'd'} and expected value is {a: 'b'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": "b"}</color>

Received: <red>{"a": "b", "c": "d"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "17",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: 'b', t: {x: {r: 'r'}, z: 'z'}} and expected value is {a: 'b', t: {z: 'z'}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": "b", "t": {"z": "z"}}</color>

Received: <red>{"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "37",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: 'b', t: {x: {r: 'r'}, z: 'z'}} and expected value is {t: {x: {r: 'r'}}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"t": {"x": {"r": "r"}}}</color>

Received: <red>{"a": "b", "t": {"x": {"r": "r"}, "z": "z"}}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "37",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: 'b'} and expected value is Object.assign(Object.create(null), {a: 'b'}) 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": "b"}</color>

Received: <red>{"a": "b"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "9",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: 1, c: 2} and expected value is {a: expect.any(Number)} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": Any<Number>}</color>

Received: <red>{"a": 1, "c": 2}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "13",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: [3, 4, 5, 'v'], b: 'b'} and expected value is {a: [3, 4, 5, 'v']} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": [3, 4, 5, "v"]}</color>

Received: <red>{"a": [3, 4, 5, "v"], "b": "b"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "25",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: [3, 4, 5], b: 'b'} and expected value is {a: [3, 4, 5]} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": [3, 4, 5]}</color>

Received: <red>{"a": [3, 4, 5], "b": "b"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "21",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: [{a: 'a', b: 'b'}]} and expected value is {a: [{a: 'a'}]} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": [{"a": "a"}]}</color>

Received: <red>{"a": [{"a": "a", "b": "b"}]}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "25",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: null, b: 'b'} and expected value is {a: null} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": null}</color>

Received: <red>{"a": null, "b": "b"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "18",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {a: {x: 'x', y: 'y'}} and expected value is {a: {x: expect.any(String)}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"a": {"x": Any<String>}}</color>

Received: <red>{"a": {"x": "x", "y": "y"}}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "23",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {b: 'b'} and expected value is {} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{}</color>

Received: <red>{"b": "b"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "9",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {message: 'bar'} and expected value is {message: 'bar'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{"message": "bar"}</color>

Received: <red>{"message": "bar"}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "17",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Matching > should pass when the response body is {} and expected value is {} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).not.toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

Expected request to not have data:
<green>{}</color>

Received: <red>{}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "2",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is [1, 2, 3] and expected value is [1, 2, 2] 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Array [</intensity>
<dim>    1,</intensity>
<dim>    2,</intensity>
<green>-   2,</color>
<red>+   3,</color>
<dim>  ]</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "7",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is [1, 2, 3] and expected value is [2, 3, 1] 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Array [</intensity>
<red>+   1,</color>
<dim>    2,</intensity>
<dim>    3,</intensity>
<green>-   1,</color>
<dim>  ]</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "7",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is [1, 2] and expected value is [1, 3] 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Array [</intensity>
<dim>    1,</intensity>
<green>-   3,</color>
<red>+   2,</color>
<dim>  ]</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "5",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is { a: 'b', c: 'd', [Symbol.for('expect-http-client-matchers').toString()]: 'expect-http-client-matchers' } and expected value is {a: 'b', [Symbol.for('expect-http-client-matchers')]: 'expect-http-client-matchers'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 0</color>

<dim>  Object {</intensity>
<dim>    "a": "b",</intensity>
<green>-   Symbol(expect-http-client-matchers): "expect-http-client-matchers",</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "85",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is { a: 'b', c: 'd', [Symbol.for('expect-http-client-matchers').toString()]: 'expect-http-client-matchers' } and expected value is {a: 'c', [Symbol.for('expect-http-client-matchers')]: expect.any(String)} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 2</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<green>-   "a": "c",</color>
<green>-   Symbol(expect-http-client-matchers): Any<String>,</color>
<red>+   "a": "b",</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "85",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: 'a', c: 'd'} and expected value is {a: expect.any(Number)} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<green>-   "a": Any<Number>,</color>
<red>+   "a": "a",</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "17",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: 'b', c: 'd', [Symbol.for('expect-http-client-matchers').toString()]: 'expect-http-client-matchers'} and expected value is {a: 'b', c: 'd', [Symbol.for('expect-http-client-matchers')]: 'expect-http-client-matchers'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 0</color>

<dim>  Object {</intensity>
<dim>    "a": "b",</intensity>
<dim>    "c": "d",</intensity>
<green>-   Symbol(expect-http-client-matchers): "expect-http-client-matchers",</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "85",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: 'b', c: 'd'} and expected value is {a: 'b!', c: 'd'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<green>-   "a": "b!",</color>
<red>+   "a": "b",</color>
<dim>    "c": "d",</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "17",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: 'b', c: 'd'} and expected value is {e: 'b'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 2</color>

<dim>  Object {</intensity>
<green>-   "e": "b",</color>
<red>+   "a": "b",</color>
<red>+   "c": "d",</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "17",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: 'b', t: {x: {r: 'r'}, z: 'z'}} and expected value is {a: 'b', t: {z: [3]}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 3</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<dim>    "a": "b",</intensity>
<dim>    "t": Object {</intensity>
<green>-     "z": Array [</color>
<green>-       3,</color>
<green>-     ],</color>
<red>+     "z": "z",</color>
<dim>    },</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "37",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: 'b', t: {x: {r: 'r'}, z: 'z'}} and expected value is {t: {l: {r: 'r'}}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 2</color>

<dim>  Object {</intensity>
<dim>    "t": Object {</intensity>
<green>-     "l": Object {</color>
<red>+     "x": Object {</color>
<dim>        "r": "r",</intensity>
<dim>      },</intensity>
<red>+     "z": "z",</color>
<dim>    },</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "37",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: 1, b: 1, c: 1, d: {e: {f: 555}}} and expected value is {d: {e: {f: 222}}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<dim>    "d": Object {</intensity>
<dim>      "e": Object {</intensity>
<green>-       "f": 222,</color>
<red>+       "f": 555,</color>
<dim>      },</intensity>
<dim>    },</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "39",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: [3, 4, 'v'], b: 'b'} and expected value is {a: ['v']} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 0</color>
<red>+ Received value  + 2</color>

<dim>  Object {</intensity>
<dim>    "a": Array [</intensity>
<red>+     3,</color>
<red>+     4,</color>
<dim>      "v",</intensity>
<dim>    ],</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "23",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: [3, 4, 5], b: 'b'} and expected value is {a: [3, 4, 5, 6]} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 0</color>

<dim>  Object {</intensity>
<dim>    "a": Array [</intensity>
<dim>      3,</intensity>
<dim>      4,</intensity>
<dim>      5,</intensity>
<green>-     6,</color>
<dim>    ],</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "21",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: [3, 4, 5], b: 'b'} and expected value is {a: [3, 4]} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 0</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<dim>    "a": Array [</intensity>
<dim>      3,</intensity>
<dim>      4,</intensity>
<red>+     5,</color>
<dim>    ],</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "21",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: [3, 4, 5], b: 'b'} and expected value is {a: {b: 4}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 3</color>
<red>+ Received value  + 5</color>

<dim>  Object {</intensity>
<green>-   "a": Object {</color>
<green>-     "b": 4,</color>
<green>-   },</color>
<red>+   "a": Array [</color>
<red>+     3,</color>
<red>+     4,</color>
<red>+     5,</color>
<red>+   ],</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "21",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: [3, 4, 5], b: 'b'} and expected value is {a: {b: expect.any(String)}} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 3</color>
<red>+ Received value  + 5</color>

<dim>  Object {</intensity>
<green>-   "a": Object {</color>
<green>-     "b": Any<String>,</color>
<green>-   },</color>
<red>+   "a": Array [</color>
<red>+     3,</color>
<red>+     4,</color>
<red>+     5,</color>
<red>+   ],</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "21",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: [{a: 'a', b: 'b'}]} and expected value is {a: [{a: 'c'}]} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<dim>    "a": Array [</intensity>
<dim>      Object {</intensity>
<green>-       "a": "c",</color>
<red>+       "a": "a",</color>
<dim>      },</intensity>
<dim>    ],</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "25",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: new Date('2015-11-30').toISOString(), b: 'b'} and expected value is {a: new Date('2015-10-10')} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<green>-   "a": 2015-10-10T00:00:00.000Z,</color>
<red>+   "a": "2015-11-30T00:00:00.000Z",</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "40",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: null, b: 'b'} and expected value is {a: '4'} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<green>-   "a": "4",</color>
<red>+   "a": null,</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "18",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: undefined, b: 'b', c: 'c'} and expected value is new Sub() 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 4</color>

<green>- Sub {}</color>
<red>+ Object {</color>
<red>+   "b": "b",</color>
<red>+   "c": "c",</color>
<red>+ }</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "17",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: undefined, b: 'b'} and expected value is new Foo() as cant match because classes are not valid JSON value 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 3</color>

<green>- Foo {}</color>
<red>+ Object {</color>
<red>+   "b": "b",</color>
<red>+ }</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "9",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {a: {}} and expected value is {a: new Set([])} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<green>-   "a": Set {},</color>
<red>+   "a": Object {},</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "8",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {c: 'd'} and expected value is Object.assign(Object.create(null), {a: 'b'}) 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<green>-   "a": "b",</color>
<red>+   "c": "d",</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "9",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {d: 4} and expected value is withDefineProperty(new Sub(), 'd', 4) 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 3</color>

<green>- Sub {}</color>
<red>+ Object {</color>
<red>+   "d": 4,</color>
<red>+ }</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "7",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > Not matching > should not match when the response body is {} and expected value is  {a: null} 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 3</color>
<red>+ Received value  + 1</color>

<green>- Object {</color>
<green>-   "a": null,</color>
<green>- }</color>
<red>+ Object {}</color>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "2",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > circular references > should not pass when expected object contain circular references as its not possible in response object 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<dim>    "a": "hello",</intensity>
<green>-   "ref": [Circular],</color>
<red>+   "ref": Object {},</color>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "22",
    "connection": "keep-alive"
  }
}
`;

exports[`(.not).toHaveBodyMatchObject > using axios > toMatchObject tests > circular references > should not pass when expected object contain transitive circular references as its not possible in response object 1`] = `
<dim>expect(</intensity><red>received</color><dim>).toHaveBodyMatchObject(</intensity><green>expected</color><dim>)</intensity>

<green>- Expected value  - 1</color>
<red>+ Received value  + 1</color>

<dim>  Object {</intensity>
<dim>    "a": "hello",</intensity>
<dim>    "nestedObj": Object {</intensity>
<green>-     "parentObj": [Circular],</color>
<red>+     "parentObj": Object {},</color>
<dim>    },</intensity>
<dim>  }</intensity>

------------
response is:
{
  "url": "http://127.0.0.1:54607/body",
  "status": 200,
  "headers": {
    "content-type": "application/json; charset=utf-8",
    "content-length": "42",
    "connection": "keep-alive"
  }
}
`;
